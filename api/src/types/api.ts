/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/health": {
    /** Health endpoint */
    get: {
      responses: {
        200: components["responses"]["Health"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/campings": {
    /** Search campings */
    get: {
      parameters: {
        query: {
          /** The number of campings to skip before starting to collect the result set */
          offset: number;
          /** The numbers of campings to return */
          limit?: number;
          /** Latitude */
          lat?: number;
          /** Longitude */
          lng?: number;
          /** Radius in km to search within */
          radius?: number;
        };
      };
      responses: {
        200: components["responses"]["Campings"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/campings/{id}": {
    /** Get camping by id */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: components["responses"]["Camping"];
        default: components["responses"]["Error"];
      };
    };
  };
}

export interface components {
  schemas: {
    GeoLocation: {
      type: "Point";
      /** Array with longitude and latitude coordinates */
      coordinates: number[];
    };
    Address: {
      street: string;
      city: string;
      region: string;
      country: string;
    };
    Infrastructure: {
      electricityAtPitch?: boolean;
      waterAtPitch?: boolean;
      sewageAtPitch?: boolean;
      gasAtPitch?: boolean;
      tvAtPitch?: boolean;
      gasBottleExchange?: boolean;
      wlan?: boolean;
      internetTerminal?: boolean;
      lockers?: boolean;
      lounge?: boolean;
      dryingRoom?: boolean;
      cookingFacilities?: boolean;
      dogShowers?: boolean;
      dogMeadow?: boolean;
      dogBathing?: boolean;
      rvDisposal?: boolean;
      supermarket?: boolean;
      breadService?: boolean;
      imbiss?: boolean;
      restaurant?: boolean;
      wheelchairRamps?: boolean;
      pavedStreets?: boolean;
      bonfireArea?: boolean;
      campfireAllowedAtPitch?: boolean;
      firewood?: boolean;
      charcoalBbqAllowed?: boolean;
      tableBenches?: boolean;
    };
    Sanitary: {
      babyChangeRoom?: boolean;
      cabins?: boolean;
      rentableCabins?: boolean;
      wheelchairAccessible?: boolean;
      washingMachines?: boolean;
      clothesDryer?: boolean;
    };
    Leisure: {
      playground?: boolean;
    };
    Rentals: {
      tents?: boolean;
    };
    CampingLinks: {
      campinginfo: string;
      website?: string;
    };
    Camping: {
      id: string;
      name: string;
      stars?: number;
      location: components["schemas"]["GeoLocation"];
      address: components["schemas"]["Address"];
      infrastructure: components["schemas"]["Infrastructure"];
      sanitary: components["schemas"]["Sanitary"];
      leisure: components["schemas"]["Leisure"];
      rentals: components["schemas"]["Rentals"];
    };
    Health: {
      status: string;
    };
    ValidationError: {
      path: string;
      message: string;
      errorCode: string;
    };
    Error: {
      message: string;
      errors?: components["schemas"]["ValidationError"][];
    };
  };
  responses: {
    /** Error message */
    Error: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** Health response */
    Health: {
      content: {
        "application/json": components["schemas"]["Health"];
      };
    };
    /** Array of campings */
    Campings: {
      content: {
        "application/json": {
          items?: components["schemas"]["Camping"][];
        };
      };
    };
    /** Single camping object */
    Camping: {
      content: {
        "application/json": {
          item?: components["schemas"]["Camping"];
        };
      };
    };
  };
}

export interface operations {}
