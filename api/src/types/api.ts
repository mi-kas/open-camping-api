/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/health": {
    /** Health endpoint */
    get: {
      responses: {
        200: components["responses"]["Health"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/campings": {
    /** Search campings */
    post: {
      responses: {
        200: components["responses"]["Campings"];
        default: components["responses"]["Error"];
      };
      /** Camping search request body */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CampingSearch"];
        };
      };
    };
  };
  "/campings/{id}": {
    /** Get camping by id */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: components["responses"]["Camping"];
        default: components["responses"]["Error"];
      };
    };
  };
}

export interface components {
  schemas: {
    /** Array with longitude and latitude coordinates */
    Point2D: number[];
    /** GeoJSON point */
    Point: {
      type: "Point";
      coordinates: components["schemas"]["Point2D"];
    };
    /** GeoJSON polygon */
    Polygon: {
      type: "Polygon";
      coordinates: components["schemas"]["Point2D"][][];
    };
    /** Searches for campings near the specified coordinates and within the specified maximum distance. Campings are returned from nearest to farthest. */
    PointSearch: {
      geometry: components["schemas"]["Point"];
      /** Maximum distance in meters from the point coordinates */
      maxDistance: number;
    };
    /** Searches for campings within the specified polygon */
    PolygonSearch: {
      geometry: components["schemas"]["Polygon"];
    };
    CampingSearch: {
      /** The number of campings to skip before starting to collect the result set */
      offset: number;
      /** The number of campings to skip before starting to collect the result set */
      limit: number;
      countryCode?: components["schemas"]["CountryCode"];
      location?:
        | components["schemas"]["PointSearch"]
        | components["schemas"]["PolygonSearch"];
    };
    /** ISO 3166-1 alpha-2 code of the country */
    CountryCode: string;
    Camping: {
      id: string;
      /** GeoJSON point of the camping's location */
      location: components["schemas"]["Point"];
      countryCode: components["schemas"]["CountryCode"];
      /** Tags attached to the OpenStreetMap listing of the camping */
      tags?: { [key: string]: any };
    };
    Health: {
      status: string;
    };
    ValidationError: {
      path: string;
      message: string;
      errorCode: string;
    };
    Error: {
      message: string;
      errors?: components["schemas"]["ValidationError"][];
    };
  };
  responses: {
    /** Error message */
    Error: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** Health response */
    Health: {
      content: {
        "application/json": components["schemas"]["Health"];
      };
    };
    /** Array of campings */
    Campings: {
      content: {
        "application/json": {
          items?: components["schemas"]["Camping"][];
        };
      };
    };
    /** Single camping object */
    Camping: {
      content: {
        "application/json": {
          item?: components["schemas"]["Camping"];
        };
      };
    };
  };
}

export interface operations {}
